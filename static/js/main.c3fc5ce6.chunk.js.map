{"version":3,"sources":["Components/Kart.jsx","App.js","serviceWorker.js","index.js"],"names":["animBoxStyle","height","width","buttonStyle","borderRadius","border","backgroundColor","color","padding","textTransform","margin","cursor","animObject","count","idleLoopSegment","actionLoopSegment","Kart","updateText","text","renderer","elements","updateDocumentData","t","playAction","playSegments","onSegmentStart","console","log","lottie","loadAnimation","container","this","animBox","loop","autoplay","animationData","animData","style","ref","onClick","getNewValue","React","Component","textAlign","display","flexFlow","alignItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gzPAIMA,EAAe,CACjBC,OAAQ,QACRC,MAAO,SAGLC,EAAc,CAChBF,OAAQ,OACRG,aAAc,OACdC,OAAQ,OACRC,gBAAiB,QACjBC,MAAO,QACPC,QAAS,SACTC,cAAe,YACfC,OAAQ,OACRC,OAAQ,WAGRC,EAAa,KACbC,EAAQ,EACRC,EAAkB,CAAC,EAAE,IACrBC,EAAoB,CAAC,IAAK,KAuCfC,E,4MAtBXC,WAAa,SAACC,GACVN,EAAWO,SAASC,SAAS,GAAGC,mBAAmB,CAACC,EAAG,GAAGJ,K,EAE9DK,WAAa,WACTX,EAAWY,aAAaT,GAAmB,GAC3CH,EAAWa,eAAiBb,EAAWY,aAAaV,GAAiB,I,kEAlBrEY,QAAQC,IAAI,sBAEZf,EAAagB,IAAOC,cAAc,CAC9BC,UAAWC,KAAKC,QAChBb,SAAU,MACVc,MAAM,EACNC,UAAU,EACVC,cAAeC,KAGRZ,aAAaV,GAAiB,GACzCF,EAAWa,eAAiBb,EAAWY,aAAaV,GAAiB,K,oCAUrE,QAASD,I,+BAGJ,IAAD,OACJ,OACI,oCACI,yBAAKwB,MAAOrC,EAAcsC,IAAM,SAAAA,GAAG,OAAI,EAAKN,QAAUM,KACtD,4BAAQC,QAAS,kBAAI,EAAKtB,WAAW,EAAKuB,gBAAgBH,MAAOlC,GAAjE,eACA,4BAAQoC,QAAS,kBAAI,EAAKhB,cAAcc,MAAOlC,GAA/C,oB,GA/BGsC,IAAMC,WCrBnBL,EAAQ,CACZM,UAAW,SACXrC,gBAAiB,QACjBE,QAAS,MACTP,OAAQ,QACR2C,QAAS,OACTC,SAAU,SACVC,WAAY,UAaCC,MAVf,WAEE,OACE,yBAAKV,MAAOA,GAEV,kBAAC,EAAD,QCRcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.c3fc5ce6.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport lottie from 'lottie-web'\nimport animData from '../lottie-data/kart_loop_3.json'\n\nconst animBoxStyle = {\n    height: '400px',\n    width: '400px',\n};\n\nconst buttonStyle = {\n    height: '40px',\n    borderRadius: '20px',\n    border: 'none',\n    backgroundColor: 'black',\n    color: 'white',\n    padding: '0 20px',\n    textTransform: 'uppercase',\n    margin: '10px',\n    cursor: 'pointer',\n};\n\nlet animObject = null;\nlet count = 0;\nlet idleLoopSegment = [0,60];\nlet actionLoopSegment = [120, 180];\n\nclass Kart extends React.Component {\n    componentDidMount(){\n        console.log('component mounted');\n\n        animObject = lottie.loadAnimation({\n            container: this.animBox,\n            renderer: 'svg',\n            loop: true,\n            autoplay: false,\n            animationData: animData,\n        });\n\n        animObject.playSegments(idleLoopSegment, true);\n        animObject.onSegmentStart = animObject.playSegments(idleLoopSegment, false);\n    }\n    updateText = (text) => {\n        animObject.renderer.elements[0].updateDocumentData({t: \"\"+text})\n    }\n    playAction = ()=> {\n        animObject.playSegments(actionLoopSegment, false);\n        animObject.onSegmentStart = animObject.playSegments(idleLoopSegment, false);\n    }\n    getNewValue(){\n        return ++count;\n    }\n\n    render(){\n        return (\n            <>\n                <div style={animBoxStyle} ref={ ref => this.animBox = ref }></div>\n                <button onClick={()=>this.updateText(this.getNewValue())} style={buttonStyle}>Add To Cart</button>\n                <button onClick={()=>this.playAction()} style={buttonStyle}>Play Action</button>\n            </>\n        )\n    }\n}\n\nexport default Kart;\n","import React from 'react';\nimport './reset.css';\n// import TimeLine from './Components/TimeLine';\nimport Kart from './Components/Kart';\n\nconst style = {\n  textAlign: 'center',\n  backgroundColor: 'white',\n  padding: '2em',\n  height: '100vh',\n  display: 'flex',\n  flexFlow: 'column',\n  alignItems: 'center'\n}\n\nfunction App() {\n\n  return (\n    <div style={style}>\n      {/* <TimeLine/> */}\n      <Kart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}